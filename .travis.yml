language: bash

jobs:
  include:
    # Stages for all branches and pull requests
    
    - stage: Build and run unit tests
      name: Build on Linux environment
      os: linux
      before_install:
      - |
        sudo apt-get update
        curl -OJLs https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
        bash Miniconda3-latest-Linux-x86_64.sh -p $HOME/miniconda -b
        source "$HOME/miniconda/etc/profile.d/conda.sh"
        cd ${TRAVIS_BUILD_DIR}
        conda env create -f environment_linux.yml
        conda activate lm3_dev
      script:
      - |
        cd ${TRAVIS_BUILD_DIR}
        cmake -H. -B_build -D CMAKE_BUILD_TYPE=Release
        cmake --build _build -- -j2
        cat > .lmenv << EOF
        {
          "path": "${TRAVIS_BUILD_DIR}",
          "bin_path": "${TRAVIS_BUILD_DIR}/_build/bin",
        }
        EOF
        python run_tests.py --lmenv .lmenv
        
    - name: Build on Windows environment
      os: windows
      dist: 1803-containers
      # Workaround for https://travis-ci.community/t/choco-install-hangs-forever/307/20
      filter_secrets: false
      before_install:
      - |
        choco install openssl.light
        refreshenv
        choco install miniconda3
        export PATH="/c/Tools/miniconda3/Scripts:$PATH"
        # Calling activate command with conda>=4.6.9 in bash on Windows is not working.
        # For workaround, we stick to 4.6.8.
        # https://github.com/conda/conda/issues/8506
        conda install -y -n base conda=4.6.8
        cd ${TRAVIS_BUILD_DIR}
        conda env create -f environment_win.yml
        source activate lm3_dev
      script:
      - |
        cd ${TRAVIS_BUILD_DIR}
        cmake -H. -B_build -G "Visual Studio 15 2017 Win64"
        cmake --build _build --config Release
        cat > .lmenv << EOF
        {
          "path": "${TRAVIS_BUILD_DIR}",
          "bin_path": "${TRAVIS_BUILD_DIR}/_build/bin/Release",
        }
        EOF
        python run_tests.py --lmenv .lmenv

    # ---------------------------------------------------------------------------------------------

    # Stages only for push to master branche

    # Build docker container 
    - stage: Docker build
      if: (branch = master) AND (type = push)
      os: linux
      sudo: required
      services: docker
      script:
        - |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker build -t lightmetrica-v3-travis .
          docker images
          docker tag lightmetrica-v3-travis $DOCKER_USERNAME/lightmetrica-v3-travis
          docker push $DOCKER_USERNAME/lightmetrica-v3-travis

    # We separated a job for tests to meet the limit of maximum running time
    - stage: Functional tests and documentation
      if: (branch = master) AND (type = push)
      os: linux
      sudo: required
      services: docker
      before_install:
        - git clone https://$GITHUB_TOKEN@github.com/hi2p-perim/lightmetrica-v3-scenes-2.git scenes
      script:
        - travis_wait 120 sleep infinity & docker run --rm -it -v $TRAVIS_BUILD_DIR:/lm3 $DOCKER_USERNAME/lightmetrica-v3-travis bash -c \
          'source ~/.bashrc &&
          cd /lightmetrica-v3 &&
          python run_tests.py --lmenv .lmenv_docker --functest &&
          cp -r executed_functest /lm3/doc/ &&
          cd /lm3/doc &&
          mkdir _build &&
          doxygen &&
          make html &&
          touch _build/html/.nojekyll'
      deploy:
        provider: pages
        repo: lightmetrica/lightmetrica-v3-doc
        local_dir: doc/_build/html
        skip_cleanup: true
        github_token: $GITHUB_TOKEN
        keep_history: false
        target-branch: master
        on:
          branch: master